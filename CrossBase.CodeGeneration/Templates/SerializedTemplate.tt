<#@ template debug="true" hostspecific="false" language="C#" inherits="CodeGeneration.Templates.TemplateBase"  #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGeneration.Language" #>

<#+
	public override void Render()
	{
		var classes = Parser.GetAllClassesThatHaveAnAttribute("Serialized");
		
		foreach(var @class in classes)
		{
			Generate(@class);
		}

		base.Render();
	}

	private void Generate(Class @class)
    {
		foreach(var attribute in @class.Attributes)
		{
			if (attribute.Name != "Serialized")
				continue;
			var fileName = attribute.FileName;
			var projectItem = Parser.GetProjectItem(fileName);
			var outputFileName = fileName.Replace(".cs", ".Serialized.g.cs");
			GenerateHeader();
			GenerateUsings(@class, new List<string> { "System", "System.IO", "System.Xml.Serialization", "CrossBase.Reflection", "CrossBase.Common"});
#>

namespace <#= @class.Namespace.Name #>	
{
    public partial class <#= @class.Name  #>
    {
        private static XmlSerializer serializer;
	
        protected static XmlSerializer Serializer
		{
			get
			{
				if (serializer == null)
				{
	            	serializer = new XmlSerializer(typeof(<#= @class.Name  #>), ReflectionHelper.GetDerivedTypes(typeof(<#= @class.Name  #>)));
				}
				return serializer;
			}
		}

        public static <#= @class.Name  #> DeserializeFromString(string s)
        {
            var reader = new StringReader(s);
            var ss = (<#= @class.Name  #>)Serializer.Deserialize(reader);
            reader.Close();
            return ss;
        }

        public string SerializeToString()
        {
            var writer = new StringWriter();
            Serializer.Serialize(writer, this);
            var s = writer.ToString();
            writer.Close();
            return s;
        }
		
        public static <#= @class.Name  #> DeserializeFromFile(string s)
        {
            TextReader reader = new StreamReader(s);
            var obj = (<#= @class.Name  #>)Serializer.Deserialize(reader);
            reader.Close();
            return obj;
        }

        public void SerializeToFile(string s)
        {
            TextWriter writer = new StreamWriter(s);
            Serializer.Serialize(writer, this);
            writer.Close();
        }
		
        public static <#= @class.Name  #> DeserializeFromFileOrDefault(string fileName, <#= @class.Name  #> default<#= @class.Name  #>)
        {
            if (SystemServices.FileSystem.FileExists(fileName))
            {
                default<#= @class.Name  #> = DeserializeFromFile(fileName);
            }
            else
            {
                default<#= @class.Name  #>.SerializeToFile(fileName);
            }
            return default<#= @class.Name  #>;
        }

	}
	
}

<#+
			GenerateFooter();
			debugOutput += string.Format("Generated {0}\r\n", outputFileName);
			Delete(projectItem, outputFileName);
			Save(projectItem, outputFileName);
		}
    }
#>
