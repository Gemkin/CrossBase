<#@ template debug="true" hostspecific="false" language="C#" inherits="CrossBase.CodeGeneration.Templates.TemplateBase"  #>
<#@ import namespace="Attributes" #>
<#@ import namespace="CrossBase.StateMachine" #>
<#@ import namespace="Language" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#+
    private const string attributeName = "StateMachine";
    private string initialState;
    private string transitionsString;
    private List<Trans> transitions;
    private List<string> states;
    private Class currentClass;
    private List<string> events;
    private string specialString;
    private List<Spec> specials;
    private List<string> namespaces;

    public static bool IsGraphvizInstalled()
    {
        try
        {
            var command = String.Format("-?");
                
            var processInfo = new ProcessStartInfo("dot", command)
            {
                CreateNoWindow = false,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true
            };
            var process = Process.Start(processInfo);
            var std = process.StandardOutput.ReadToEnd();
            var error = process.StandardError.ReadToEnd();
            process.WaitForExit();
            process.Close();

            return std.StartsWith("Usage: dot");
        }
        catch (Exception)
        {
            return false;
        }
    }

    private static string GenerateImageFromDotFile(string fileName, string dotFileName, string type)
    {
        var imageFileName = string.Format("{0}.{1}", fileName, type);
        var command = String.Format("-T{2} \"{0}\" -o\"{1}\"", dotFileName, imageFileName, type);
        var processInfo = new ProcessStartInfo("dot", command)
        {
            CreateNoWindow = false,
            UseShellExecute = false,
        };
        var process = Process.Start(processInfo);
        process.WaitForExit();
        process.Close();
        return imageFileName;
    }


    

    public class Trans
    {
        public string Current { get; set; }        
        public string Event { get; set; }        
        public string Next { get; set; }        
    }

    public class Spec
    {
        public string Event { get; set; }        
        public string Next { get; set; }        
    }


    public override void Render()
	{
	    Name = "StateMachine Generator";
		debugOutput = string.Empty;
		var classes = Parser.GetAllClassesThatHaveAnAttribute(attributeName);
		
		foreach(var @class in classes)
		{
		    currentClass = @class;
			GenerateClass();
		}

	    base.Render();
	}

	

	private void GenerateClass()
    {
        
	    foreach (var attribute in currentClass.Attributes)
	    {
	        if (attribute.Name != attributeName)
	            continue;
    	    initialState = @attribute.GetArgument("InitState") + "State";
    	    transitionsString = @attribute.GetArgument("Transitions");
            specialString = @attribute.GetArgument("Special");
	        break;
	    }

	    namespaces = new List<string>
	    {
	        "System",
	        "CrossBase.StateMachine",
	        "CrossBase.Dispatch",
	        "CrossBase.Log",
	        @currentClass.Namespace.Name
	    };

	    GetTransistions();
	    GetSpecials();
        GetStates();
        GetEvents();
	    GenerateBaseState();
	    GenerateStateClasses();
        GenerateInterface();
	    GenerateMachine();
	    GenerateTransitions();
	    GenerateEvents();
	    GenerateContext();
	    GenerateContextInterface();
	    GenerateStateEventArgs();
	    GenerateDotFromTransitions();
    }

    

    private void GenerateStateClasses()
    {
        foreach (var state in states)
        {
            GenerateStateClass(state);
            GenerateStateEventArgs(state);
        }
    }

    private void GetStates()
    {

        states = new List<string> {initialState};
        foreach (var t in transitions)
        {
            AddState(t.Current);
            AddState(t.Next);
        }
    }

    private void GetEvents()
    {
        events = new List<string>();
        foreach (var t in transitions)
        {
            AddEvent(t.Event);
        }

        foreach (var t in specials)
        {
            AddEvent(t.Event);
        }
    }

    private void AddEvent(string s)
    {
        if (!events.Contains(s)) events.Add(s);
    }


    private void AddState(string s)
    {
        if (!states.Contains(s)) states.Add(s);
    }

    private void GetSpecials()
    {
        specials = new List<Spec>();
        foreach (var special in Split(specialString, ';'))
        {
            SplitSpecial(special);
        }
    }

    private void SplitSpecial(string special)
    {
        special = special.Trim();
        var regex = new Regex("\\s*(?<Event>\\w+)\\s*->\\s*(?<Next>\\w+)\\s*",RegexOptions.CultureInvariant| RegexOptions.Compiled);
        var m = regex.Match(special);

        if (m.Success)
        {
            specials.Add(new Spec{Event = m.Groups["Event"].Value, Next = m.Groups["Next"].Value + "State"});
        }
    }


    private void GetTransistions()
    {
        transitions = new List<Trans>();
        foreach (var transition in Split(transitionsString, ';'))
        {
            SplitTransition(transition);
        }
    }

    private void SplitTransition(string transition)
    {
        transition = transition.Trim();
        var regex = new Regex("\\s*(?<Current>\\w+)\\s*\\|\\s*(?<Event>\\w+)\\s*->\\s*(?<Next>\\w+)\\s*",RegexOptions.CultureInvariant| RegexOptions.Compiled);
        var m = regex.Match(transition);

        if (m.Success)
        {
            transitions.Add(new Trans{Current = m.Groups["Current"].Value + "State", Event = m.Groups["Event"].Value, Next = m.Groups["Next"].Value + "State"});
        }
    }

    private static IEnumerable<string> Split(string s, char c)
    {
        return s.Split(new[] {c}, StringSplitOptions.RemoveEmptyEntries);
    }

    private void GenerateContextInterface()
    {
		var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
		var outputFileName = fileName.Replace(".cs", ".Context.Interface.g.cs");
		
		GenerateHeader();
		GenerateUsings(@currentClass, namespaces);
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public partial interface I<#= currentClass.Name  #>Context: IStateContext
    {
	}
}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
	}
   
    private void GenerateContext()
    {
		var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
		var outputFileName = fileName.Replace(".cs", ".Context.g.cs");
		
		GenerateHeader();
		GenerateUsings(@currentClass, namespaces);
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public partial class <#= currentClass.Name  #>Context: I<#= currentClass.Name  #>Context
    {
	}
}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
	}

    private void GenerateBaseState()
    {
		var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
		var outputFileName = fileName.Replace(".cs", "StateBase.g.cs");
		
		GenerateHeader();
		GenerateUsings(@currentClass, namespaces);
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public partial class <#= currentClass.Name  #>StateBase: BaseState<I<#= currentClass.Name  #>, I<#= currentClass.Name  #>Context, <#= currentClass.Name  #>StateEvent>
    {
	}
}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
	}

     private void GenerateStateEventArgs()
    {
		var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
		var outputFileName = fileName.Replace(".cs", "StateChangedEventArgs.g.cs");
		
		GenerateHeader();
		GenerateUsings(@currentClass, namespaces);
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public partial class <#= currentClass.Name  #>StateChangedEventArgs:StateChangedEventArgsBase
    {
	}
}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
	}

    private void GenerateInterface()
    {
		var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
		var outputFileName = fileName.Replace(".cs", "Interface.g.cs");
		
		GenerateHeader();

		GenerateUsings(@currentClass, namespaces);
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public interface I<#= currentClass.Name  #>: IStateMachine<<#= currentClass.Name  #>StateEvent>
    {

<#+
        foreach (var s in states)
        {
#>
        event EventHandler<<#= s #>EventArgs> <#= s #>Leave;
        event EventHandler<<#= s #>EventArgs> <#= s #>Enter;
<#+
        }
#>
	}
}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
	}


    private void GenerateMachine()
    {
		var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
		var outputFileName = fileName.Replace(".cs", ".g.cs");
		
		GenerateHeader();

		GenerateUsings(@currentClass, namespaces);
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public partial class <#= currentClass.Name  #>: StateMachineBase< I<#= currentClass.Name  #>Context,  
                                                                      <#= currentClass.Name  #>Transitions, 
                                                                      <#= currentClass.Name  #>StateChangedEventArgs, 
                                                                      <#= currentClass.Name  #>StateEvent>, I<#= currentClass.Name  #>
    {
        public <#= currentClass.Name  #>(ILogger log, IDispatcher dispatcher, I<#= currentClass.Name  #>Context context) : base(log, dispatcher, context)
        {
        }

        protected override void OnEnteringNextState(<#= currentClass.Name  #>StateChangedEventArgs e)
        {
            base.OnEnteringNextState(e);
<#+
        var isFirstRender = true;
        foreach (var s in states)
        {
            var ifstatement = isFirstRender ? "if" : "else if";
            isFirstRender = false;
#>
            <#= ifstatement #>(e.PrevState is <#= s #>)
            {
                On<#= s #>Leave(new  <#= s #>EventArgs {  <#= s #> = e.PrevState as  <#= s #>, Event = (<#= currentClass.Name  #>StateEvent)e.StateEvent });
            }
                        
<#+
        }
#>
<#+
        isFirstRender = true;
        foreach (var s in states)
        {
            var ifstatement = isFirstRender ? "if" : "else if";
            isFirstRender = false;
#>
            <#= ifstatement #>(e.NextState is <#= s #>)
            {
                On<#= s #>Enter(new  <#= s #>EventArgs {  <#= s #> = e.NextState as  <#= s #>, Event = (<#= currentClass.Name  #>StateEvent)e.StateEvent });
            }
                        
<#+
        }
#>
        }

<#+
        foreach (var s in states)
        {
#>
        public event EventHandler<<#= s #>EventArgs> <#= s #>Leave;
        protected virtual void On<#= s #>Leave(<#= s #>EventArgs e)
        {
            var handler = <#= s #>Leave;
            if (handler != null) handler(this, e);
        }
        public event EventHandler<<#= s #>EventArgs> <#= s #>Enter;
        protected virtual void On<#= s #>Enter(<#= s #>EventArgs e)
        {
            var handler = <#= s #>Enter;
            if (handler != null) handler(this, e);
        }
<#+
        }
#>
	}
}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
	}


	public void GenerateStateClass(string state)
    {
		var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
		var outputFileName = fileName.Replace(".cs", "." + state + ".g.cs");
		
		GenerateHeader();
		GenerateUsings(@currentClass, namespaces);
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public partial class <#= state  #> : <#= currentClass.Name  #>StateBase
    {
	}
}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
	}

    public void GenerateStateEventArgs(string state)
    {
		var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
		var outputFileName = fileName.Replace(".cs", "." + state + "EventArgs.g.cs");
		
		GenerateHeader();
		GenerateUsings(@currentClass, new List<string> { "System", @currentClass.Namespace.Name});
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public partial class <#= state  #>EventArgs : EventArgs
    {
	    public <#= state  #> <#= state  #> { get; set; }
        public <#= @currentClass.Name #>StateEvent Event { get; set; }
    }
}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
	}


    private void GenerateDotFromTransitions()
    {
        var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
        var name = currentClass.Name + "Transitions";
	    var outputFileName = fileName.Replace(".cs", ".Transitions.g.dot");
		
#>
digraph <#= name #> { graph [ dpi = 300 ]
    <#= initialState #> [shape=box];
    AnyState [shape=box] [style=dotted];
<#+
        
        foreach (var t in transitions)
        {
            

#>
    <#= t.Current #> -> <#= t.Next #> [label=<#= t.Event #>];
<#+            
        }
        
        foreach (var s in specials)
        {
            

#>

  AnyState -> <#= s.Next #> [color=red] [label=<#= s.Event #>];
<#+            
        }
#>



}
<#+
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);

        if (!IsGraphvizInstalled())
            return;

        var svgFileName = GenerateImageFromDotFile(outputFileName, outputFileName, "svg");
		projectItem.ProjectItems.AddFromFile(svgFileName);  
        var pngFileName = GenerateImageFromDotFile(outputFileName, outputFileName, "png");
		projectItem.ProjectItems.AddFromFile(pngFileName);  
	}

    private void GenerateTransitions()
    {
        var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
        var name = currentClass.Name + "Transitions";
	    var outputFileName = fileName.Replace(".cs", ".Transitions.g.cs");
		
		GenerateHeader();
		GenerateUsings(@currentClass, namespaces);
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public class <#= name  #> : StateTransitionsDefinitionBase
    {
        public override StateTransistion[] Normal
        {
            get 
            {
<#+
        if (transitions.Count == 0)
        {
#>
                return new StateTransistion[0];
<#+            
        }
        else
        {
#>             
                return new [] 
                {
<#+
            foreach (var transition in transitions)
            {
#>
                    new StateTransistion{ Current = typeof(<#= transition.Current #>), Event = <#= @currentClass.Name #>StateEvent.<#= transition.Event #>, Next = typeof(<#= transition.Next #>) },
<#+
            }
#>

                };
<#+
        }
#>                 
            }
        }

        public override StateTransistion[] Special
        {
            get 
            {
<#+
        if (specials.Count == 0)
        {
#>
                return new StateTransistion[0];
<#+            
        }
        else
        {
#>             
                return new [] 
                {
<#+
            foreach (var s in specials)
            {
#>
                    new StateTransistion{ Event = <#= @currentClass.Name #>StateEvent.<#= s.Event #>, Next = typeof(<#= s.Next #>) },
<#+
            }
#>

                };
<#+
        }
#>                 
            }
        }
        
        public override Type InitialStateType
        {
            get { return typeof(<#= initialState #>); }
        }
	}
}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
	}


    private void GenerateEvents()
    {
        var fileName = currentClass.FileWithShortestName();
		var projectItem = Parser.GetProjectItem(fileName);
		var outputFileName = fileName.Replace(".cs", ".StateEvent.g.cs");
		
		GenerateHeader();
		GenerateUsings(@currentClass, namespaces);
#>

namespace <#= @currentClass.Namespace.Name #>	
{
    public class <#= @currentClass.Name #>StateEvent : StateEvent
    {
<#+
        foreach (var evnt in events)
        {
#>
        public static <#= @currentClass.Name #>StateEvent <#= evnt #> { get;  private set; }
<#+
        }
#>
        static <#= @currentClass.Name #>StateEvent()
        {
<#+
        foreach (var evnt in events)
        {
#>
            <#= evnt #> = new <#= @currentClass.Name #>StateEvent("<#= evnt #>");
<#+
        }
#>

        }

        private <#= @currentClass.Name #>StateEvent(string name) : base(name)
        {
        }
    }

}

<#+
		GenerateFooter();
		debugOutput += string.Format("Generated {0}\r\n", outputFileName);
		Delete(projectItem, outputFileName);
		Save(projectItem, outputFileName);
    }



#>

